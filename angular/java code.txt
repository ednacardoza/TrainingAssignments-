Application.java

package com.staxrt.tutorial;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

  /**
   * The entry point of application.
   *
   * @param args the input arguments
   */
  public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}

------------------------------------------------------------------------------------------------------------------------------------
StudentsController.java


package com.staxrt.tutorial.controller;

import com.staxrt.tutorial.exception.ResourceNotFoundException;
import com.staxrt.tutorial.model.Students;
import com.staxrt.tutorial.repository.StudentsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/v1")
public class StudentsController {

	@Autowired
	private StudentsRepository studentsRepository;

	/**
	 * Get all students list.
	 *
	 * @return the list
	 */
	@GetMapping("/students")
	public List<Students> getAllStudents() {
		return studentsRepository.findAll();
	}

	/**
	 * Gets students by id.
	 *
	 
	 */
	@GetMapping("/students/{id}")
	public ResponseEntity<Students> getStudentsById(@PathVariable(value = "id") Long studentsId)
			throws ResourceNotFoundException {
		Students stud = studentsRepository.findById(studentsId)
				.orElseThrow(() -> new ResourceNotFoundException("User not found on :: " + studentsId));
		return ResponseEntity.ok().body(stud);
	}



/**
 * Create students student.
 *
 *
 */


 @PostMapping("/students")
 public Students createStudents(@Valid @RequestBody Students student) {
	 return studentsRepository.save(student); 
	 }
}
--------------------------------------------------------------------------------------------------------------------------------------------Exception

1. ErrorResponse.java



package com.staxrt.tutorial.exception;

import java.util.Date;


public class ErrorResponse {

  private Date timestamp;
  private String status;
  private String message;
  private String details;

 
  public ErrorResponse(Date timestamp, String status, String message, String details) {
    this.timestamp = timestamp;
    this.status = status;
    this.message = message;
    this.details = details;
  }

  
  public Date getTimestamp() {
    return timestamp;
  }

  
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * Gets status.
   *
   * @return the status
   */
  public String getStatus() {
    return status;
  }

  /**
   * Sets status.
   *
   * @param status the status
   */
  public void setStatus(String status) {
    this.status = status;
  }

  /**
   * Gets message.
   *
   * @return the message
   */
  public String getMessage() {
    return message;
  }

  /**
   * Sets message.
   *
   * @param message the message
   */
  public void setMessage(String message) {
    this.message = message;
  }

  /**
   * Gets details.
   *
   * @return the details
   */
  public String getDetails() {
    return details;
  }

  /**
   * Sets details.
   *
   * @param details the details
   */
  public void setDetails(String details) {
    this.details = details;
  }
}



2.GlobalExceptionHandler.java



package com.staxrt.tutorial.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.util.Date;

@ControllerAdvice
public class GlobalExceptionHandler {

  /**
   * Resource not found exception response entity.
   *
   * @param ex the ex
   * @param request the request
   * @return the response entity
   */
  @ExceptionHandler(ResourceNotFoundException.class)
  public ResponseEntity<?> resourceNotFoundException(
      ResourceNotFoundException ex, WebRequest request) {
    ErrorResponse errorDetails =
        new ErrorResponse(new Date(), HttpStatus.NOT_FOUND.toString(), ex.getMessage(), request.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
  }

  /**
   * Globle excpetion handler response entity.
   *
   * @param ex the ex
   * @param request the request
   * @return the response entity
   */
  @ExceptionHandler(Exception.class)
  public ResponseEntity<?> globleExcpetionHandler(Exception ex, WebRequest request) {
    ErrorResponse errorDetails =
        new ErrorResponse(new Date(), HttpStatus.INTERNAL_SERVER_ERROR.toString() ,ex.getMessage(), request.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);
  }
}


3. ResourceNotFoundException.java



package com.staxrt.tutorial.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends Exception {

  /**
   * Instantiates a new Resource not found exception.
   *
   * @param message the message
   */
  public ResourceNotFoundException(String message) {
    super(message);
  }
}



------------------------------------------------------------------------------------------------------------------------------------------

Students.java


package com.staxrt.tutorial.model;

import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;



@Entity
@Table(name = "students")
@EntityListeners(AuditingEntityListener.class)
public class Students {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long id;

	@Column(name = "firstName", nullable = false)
	private String firstName;

	@Column(name = "lastName", nullable = false)
	private String lastName;

	@Column(name = "address", nullable = false)
	private String address;

	

	
	public long getId() {
		return id;
	}

	
	public void setId(long id) {
		this.id = id;
	}

	
	public String getFirstName() {
		return firstName;
	}

	
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	
	public String getLastName() {
		return lastName;
	}

	
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	
	public String getAddress() {
		return address;
	}

	
	public void setAddress(String address) {
		this.address = address;
	}

	
	/*
	 * public String getPhoneNo() { return phoneNo; }
	 * 
	 *//**
		 * Sets phonNo.
		 *
		 * @param phoneNo the phonNo.
		 *//*
			 * public void setPhoneNo(String phoneNo) { this.phoneNo = phoneNo; }
			 */

	@Override
	public String toString() {
		return "Students{" + "id=" + id + ", firstName='" + firstName + '\'' + ", lastName='" + lastName + '\''
				+ ", address='" + address + '\'' + '\'' + '}';
	}

}

------------------------------------------------------------------------------------------------------------------------------------------

StudentsRepository

package com.staxrt.tutorial.repository;

import com.staxrt.tutorial.model.Students;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface StudentsRepository extends JpaRepository<Students, Long> {}


-------------------------------------------------------------------------------------------------------------------------------------------
application.properties

## Database Properties
spring.datasource.url = jdbc:mysql://localhost:3306/newdb?useSSL=false
spring.datasource.username = root
spring.datasource.password = password


## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
server.port=8081

-------------------------------------------------------------------------------------------------------------------------------------------
students sqlcode

create table studetnts(
id long,
firstName varchar(255),
lastName varchar(255),
address varchar(255));




select * from students;

-------------------------------------------------------------------------------------------------------------------------------------------



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
		